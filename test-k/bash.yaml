apiVersion: apps/v1
kind: Deployment
metadata:
  name: kkv-test-bash
  labels: &labels
    app: kkv-test
    test-name: bash
spec:
  replicas: 1
  selector:
    matchLabels: *labels
  template:
    metadata:
      labels: *labels
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/stats/prometheus"
    spec:
      containers:
      - name: kkv
        image: yolean/kafka-keyvalue
        imagePullPolicy: Never # SKAFFOLD_NO_PRUNE=true skaffold dev
        ports:
        - containerPort: 8090
          name: api
        - containerPort: 5005
          name: debugger
        env:
        - name: kafka_bootstrap
          value: bootstrap.kafka:9092
        - name: kafka_group_id
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: topics
          value: kkv-test-bash
        - name: kafka_offset_reset
          value: earliest
        - name: update_targets
          value: http://127.0.0.1:8080/204/__topic__
          # We should also test with other endpoints, with Envoy's fault injection
          # http://127.0.0.1:8080/204/__topic__,http://127.0.0.1:8080/?topic=__topic__
      - name: envoy
        image: envoyproxy/envoy:v1.10.0@sha256:bf7970f469c3d2cd54a472536342bd50df0ddf099ebd51024b7f13016c4ee3c4
        ports:
        - containerPort: 8080
        - containerPort: 8081
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
        command:
        - /usr/local/bin/envoy
        - -l info
        args:
        - --config-yaml
        - |
          static_resources:
            listeners:
            - address:
                socket_address:
                  address: 0.0.0.0
                  port_value: 8080
              filter_chains:
              - filters:
                - name: envoy.http_connection_manager
                  config:
                    codec_type: auto
                    stat_prefix: kkvtest
                    access_log:
                    - name: envoy.file_access_log
                      filter:
                        not_health_check_filter: {}
                      config:
                        path: /logs/envoy-access.log
                        json_format:
                          ind: "enforcer access"
                          start_time: "%START_TIME%"
                          req_method: "%REQ(:METHOD)%"
                          req_path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          protocol: "%PROTOCOL%"
                          resp_code: "%RESPONSE_CODE%"
                          resp_flags: "%RESPONSE_FLAGS%"
                          bytes_recv: "%BYTES_RECEIVED%"
                          bytes_sent: "%BYTES_SENT%"
                          duration: "%DURATION%"
                          resp_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                          req_x_forward: "%REQ(X-FORWARDED-FOR)%"
                          agent: "%REQ(USER-AGENT)%"
                          req_xid: "%REQ(X-REQUEST-ID)%"
                          auth: "%REQ(:AUTHORITY)%"
                          upstream_host: "%UPSTREAM_HOST%"
                    route_config:
                      name: boards_route
                      virtual_hosts:
                      - name: service
                        domains:
                        - "*"
                        routes:
                        - match:
                            prefix: "/stats"
                          route:
                            cluster: stats-from-admin
                        - match:
                            prefix: "/200"
                          direct_response:
                            status: 200
                            body:
                              inline_string: "Thanks for the update"
                        - match:
                            prefix: "/204"
                          direct_response:
                            status: 204
                        - match:
                            prefix: "/302"
                          redirect:
                            path_redirect: /200
                            response_code: FOUND
                        - match:
                            prefix: "/"
                          direct_response:
                            status: 404
                            body:
                              inline_string: "This KKV test server has endpoints like /200 and /204"
                    http_filters:
                    - name: envoy.health_check
                      config:
                        pass_through_mode: false
                        headers:
                          name: :path
                          exact_match: /healthz
                    - name: envoy.router
                      config: {}
            clusters:
            - name: stats-from-admin
              connect_timeout: 0.25s
              type: logical_dns
              lb_policy: round_robin
              load_assignment:
                cluster_name: admin
                endpoints:
                - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 8081
          admin:
            access_log_path: "/dev/null"
            address:
              socket_address:
                address: 0.0.0.0
                port_value: 8081
        volumeMounts:
        - name: logs
          mountPath: /logs
      - name: logs-tailer
        image: busybox@sha256:4b6ad3a68d34da29bf7c8ccb5d355ba8b4babcad1f99798204e7abb43e54ee3d
        command:
        - tail
        - -f
        - /logs/envoy-access.log
        volumeMounts:
        - name: logs
          mountPath: /logs
      - name: test
        image: yolean/toil@sha256:82c8cc8d082f40753d2e409a670e1dc34455b0e2143adff285cc4102b1326d11
        command:
        - /bin/bash
        - -cex
        - |
          echo "Running"
          sleep infinity
        volumeMounts:
        - name: logs
          mountPath: /logs
      volumes:
      - name: logs
        emptyDir: {}
