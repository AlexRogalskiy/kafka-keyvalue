version: "3.4"
services:

  zookeeper:
    image: solsson/kafka:2.1.1@sha256:8bc8242c649c395ab79d76cc83b1052e63b4efea7f83547bf11eb3ef5ea6f8e1
    entrypoint: ./bin/zookeeper-server-start.sh
    command:
    - ./config/zookeeper.properties

  kafka:
    image: solsson/kafka:2.1.1@sha256:8bc8242c649c395ab79d76cc83b1052e63b4efea7f83547bf11eb3ef5ea6f8e1
    links:
    - zookeeper
    entrypoint:
    - ./bin/kafka-server-start.sh
    - ./config/server.properties
    - --override
    -   zookeeper.connect=zookeeper:2181
    - --override
    -   log.retention.hours=-1
    - --override
    -   log.dirs=/var/lib/kafka/data/topics
    - --override
    # Shouldn't be needed for streams, but currently for the test container(s) to produce data
    -   auto.create.topics.enable=true
    - --override
    -   default.replication.factor=1
    - --override
    -   min.insync.replicas=1
    - --override
    -   offsets.retention.minutes=10080
    # For access from dev environment
    - --override
    -   listeners=OUTSIDE://:19092,PLAINTEXT://:9092
    - --override
    -   advertised.listeners=OUTSIDE://localhost:19092,PLAINTEXT://:9092
    - --override
    -   listener.security.protocol.map=PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
    - --override
    -   inter.broker.listener.name=PLAINTEXT
    ports:
    - 19092:19092

  pixy:
    depends_on:
    - kafka
    build: ./pixy
    ports:
    - 19090:19090
    command:
    - -tcpAddr
    -  0.0.0.0:19090

  topic1-create:
    image: solsson/kafkacat@sha256:b91241b5741fccaef282eb8dbdfb6e5289bb8586274175b1836e57912ffecaef
    entrypoint:
    - /bin/bash
    - -c
    command:
    - |
      until kafkacat -b kafka:9092 -C -K '=' -t topic1 -e; do sleep 3; done

  cache1:
    depends_on:
    - kafka
    - topic1-create
    image: yolean/kafka-keyvalue:dev
    labels:
    - com.yolean.build-target
    ports:
    - 19081:19081
    command:
    - --standalone
    - --application-id
    -   kv-001-
    - --port
    -   '19081'
    - --streams-props
    -   bootstrap.servers=kafka:9092
    -   num.standby.replicas=0
    - --topic
    -   topic1
    - --onupdate
    -   http://example-nodejs-client:8081/kafka-keyvalue/v1/updates
    -   http://onupdate-logging:8080/
    -   http://example-nodejs-client:8082/testpost
    - --starttimeout
    -   '10'

  onupdate-logging:
    image: solsson/httpstatus-random:access-logging@sha256:5330b2e84457e65ae9552acb00b26e8b7b2a878bcafb3baabddc13c1f840cd90
    expose:
    - '8080'

  smoketest:
    depends_on:
    - onupdate-logging
    - pixy
    - cache1
    image: solsson/curl@sha256:92ebf15ac57bea360484480336ed5d9fa16d38d773fd00f7e9fb2cae94baf25a
    labels:
    - com.yolean.build-contract
    entrypoint:
    - /bin/bash
    - -cex
    - |
      curl --ipv4 --retry 5 --retry-connrefused -H 'User-Agent: curl-based-kafka-keyvalue-smoketest' http://onupdate-logging:8080/
      curl --ipv4 --retry 5 --retry-connrefused http://pixy:19090 -I
      curl --ipv4 --retry 5 --retry-connrefused http://cache1:19081 -I
      curl --ipv4 --retry 5 --retry-connrefused http://cache1:19081/metrics -f | grep consumer_metrics | grep incoming_byte_total
      curl --ipv4 --retry 5 --retry-connrefused http://cache1:19081/metrics -f | grep ^kkv_
      curl --ipv4 --retry 5 --retry-connrefused http://cache1:19081/healthz -f
      curl --ipv4 --retry 5 --retry-connrefused http://cache1:19081/cache/v1/raw/smoketest1 -I
      curl --ipv4 --retry 5 --retry-connrefused http://pixy:19090/topics -f | grep topic1
      curl --ipv4 -d '{"x":1}' -H 'Content-Type: application/json' 'http://pixy:19090/topics/topic1/messages?key=smoketest1' -f
      curl --ipv4 -d '{"x":2}' -H 'Content-Type: application/json' 'http://pixy:19090/topics/topic1/messages?key=smoketest1&sync' -f
      curl --ipv4 -d '{"x":3}' -H 'Content-Type: application/json' 'http://pixy:19090/topics/topic1/messages?key=smoketest1&sync' -f
      curl --ipv4 --retry 5 --retry-connrefused http://cache1:19081/cache/v1/raw/smoketest1 -f | grep '{"x":3}'

  example-nodejs-client:
    depends_on:
    - pixy
    - cache1
    build:
      context: ../example-nodejs-client
    labels:
    - com.yolean.build-contract
    expose:
    - "8081"
    - "8082"
    environment:
    - PIXY_HOST=http://pixy:19090
    - CACHE1_HOST=http://cache1:19081
    command:
    # By design the cache service deals with a single topic, meaning that tests probably can't run concurrently
    - --runInBand

  cache2-01:
    depends_on:
    - kafka
    - topic2-create
    image: yolean/kafka-keyvalue:dev
    expose:
    - '19082'
    command:
    - --port
    -   '19082'
    - --streams-props
    -   bootstrap.servers=kafka:9092
    # Not sure how to do this in docker-compose
    #-   num.standby.replicas=1
    - --hostname
    -   cache2-01
    - --application-id
    -   kv-002
    - --topic
    -   topic2
    - --onupdate
    -   http://onupdate-logging:8080/sharded/01
    - --starttimeout
    -   '25'

  cache2-02:
    depends_on:
    - kafka
    - topic2-create
    image: yolean/kafka-keyvalue:dev
    expose:
    - '19083'
    command:
    - --port
    -   '19083'
    - --streams-props
    -   bootstrap.servers=kafka:9092
    # Not sure how to do this in docker-compose
    #-   num.standby.replicas=1
    - --hostname
    -   cache2-02
    - --application-id
    -   kv-002
    - --topic
    -   topic2
    - --onupdate
    -   http://onupdate-logging:8080/sharded/02
    - --starttimeout
    -   '25'
