apiVersion: batch/v1
kind: Job
metadata:
  name: kkvtest
spec:
  template:
    spec:
      shareProcessNamespace: true
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - "kafka.local"
      - ip: "127.0.0.1"
        hostnames:
        - "hook.local"
      - ip: "127.0.0.1"
        hostnames:
        - "kkv.local"
      containers:
      - name: redpanda
        image: vectorized/redpanda:v21.9.1@sha256:fdf42728944df0a5e987bc4335b5618bd5f6aebf5fffe4dea28272112b4d16ed
        command:
        - /usr/bin/rpk
        - redpanda
        - start
        - --overprovisioned
        - --smp=1
        - --memory=1G
        - --reserve-memory=0M
        - --check=false
        - --node-id=0
        - --kafka-addr=PLAINTEXT://kafka.local:9092
        - --advertise-kafka-addr=PLAINTEXT://kafka.local:9092
        ports:
        - containerPort: 9092
      - name: topics
        image: vectorized/redpanda:v21.9.1@sha256:fdf42728944df0a5e987bc4335b5618bd5f6aebf5fffe4dea28272112b4d16ed
        command:
        - /bin/bash
        - -cex
        - |
          until rpk cluster --brokers kafka.local:9092 info; do sleep 1; done;
          rpk topic --brokers kafka.local:9092 create table -r 1 -p 1
          rpk topic --brokers kafka.local:9092 create onupdate -r 1 -p 1
      - name: kafka-hook
        image: docker.io/yolean/kafka-hook:1a21a5815dca637b5e88f0d78dfecf85d0276267@sha256:90931dbba5d15c7c86436dffcc5128ba25b0ffee35f2d99796184a2361161ad8
        args:
        - -Doutgoing.hook.bootstrap.servers=kafka.local:9092
        - -Doutgoing.hook.topic=onupdate
        - -Dcloudevent.source-host=https://kkvtest.yolean.se
        - -Dcloudevent.type-prefix=se.yolean.kkvtest.
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "30Mi"
            cpu: "30m"
          limits:
            memory: "30Mi"
            cpu: "30m"
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
      - name: kkv
        image: builds-registry.ystack.svc.cluster.local/yolean/kafka-keyvalue
        env:
        - name: QUARKUS_HTTP_PORT
          value: "8091"
        - name: topic
          value: table
        - name: kafka_bootstrap
          value: kafka.local:9092
        - name: kafka_group_id
          value: kkv001
        - name: kafka_offset_reset
          value: latest
        - name: target
          value: http://hook.local:8080/hook/v1/kkv001
        ports:
        - name: http
          containerPort: 8091
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: api
          timeoutSeconds: 2
          initialDelaySeconds: 30
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: api
          timeoutSeconds: 2
          initialDelaySeconds: 30
      - name: test
        image: docker.io/yolean/toil:7a281dfc9eb329c14dd6e5814071a37885554f9c@sha256:68bc7443a42cc886dda1267fb95200cbc8026c2fe16ec4f178eabc2988413a3e
        env:
        - name: BOOTSTRAP
          value: kafka.local:9092
        - name: KKV
          value: http://kkv.local:8091
        - name: HOOK
          value: http://hook.local:8080
        command:
        - /bin/bash
        - -cex
        - |
          echo 'k1#test1' | kcat -b $BOOTSTRAP -P -t table -K# -e
          curl $KKV/cache/v1/keys | grep '["k1"]'

          tail -f /dev/null
      # We might want to switch to OnError as that's quite similar to a separate pods setup
      restartPolicy: Never
